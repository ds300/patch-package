"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageVCSDetails = getPackageVCSDetails;
exports.shouldRecommendIssue = shouldRecommendIssue;
exports.maybePrintIssueCreationPrompt = maybePrintIssueCreationPrompt;
exports.openIssueCreationLink = openIssueCreationLink;
const chalk_1 = __importDefault(require("chalk"));
const open_1 = __importDefault(require("open"));
const querystring_1 = require("querystring");
const path_1 = require("./path");
const repoSpecifier = /^([\w.-]+)\/([\w.-]+)$/;
const githubURL = /github.com(:|\/)([\w.-]+\/[\w.-]+?)(.git|\/.*)?$/;
function parseRepoString(repository) {
    if (repository.startsWith("github:")) {
        repository = repository.replace(/^github:/, "");
    }
    const urlMatch = repository.match(githubURL);
    if (urlMatch) {
        repository = urlMatch[2];
    }
    const specMatch = repository.match(repoSpecifier);
    if (!specMatch) {
        return null;
    }
    const [, org, repo] = specMatch;
    return { org, repo, provider: "GitHub" };
}
function getPackageVCSDetails(packageDetails) {
    const repository = require((0, path_1.resolve)((0, path_1.join)(packageDetails.path, "package.json")))
        .repository;
    if (!repository) {
        return null;
    }
    if (typeof repository === "string") {
        return parseRepoString(repository);
    }
    else if (typeof repository === "object" &&
        typeof repository.url === "string") {
        return parseRepoString(repository.url);
    }
}
function createIssueUrl({ vcs, packageDetails, packageVersion, diff, }) {
    return `https://github.com/${vcs === null || vcs === void 0 ? void 0 : vcs.org}/${vcs === null || vcs === void 0 ? void 0 : vcs.repo}/issues/new?${(0, querystring_1.stringify)({
        title: "",
        body: `Hi! 👋 
      
Firstly, thanks for your work on this project! 🙂

Today I used [patch-package](https://github.com/ds300/patch-package) to patch \`${packageDetails.name}@${packageVersion}\` for the project I'm working on.

<!-- 🔺️🔺️🔺️ PLEASE REPLACE THIS BLOCK with a description of your problem, and any other relevant context 🔺️🔺️🔺️ -->

Here is the diff that solved my problem:

\`\`\`diff
${diff}
\`\`\`

<em>This issue body was [partially generated by patch-package](https://github.com/ds300/patch-package/issues/296).</em>
`,
    })}`;
}
function shouldRecommendIssue(vcsDetails) {
    if (!vcsDetails) {
        return true;
    }
    const { repo, org } = vcsDetails;
    if (repo === "DefinitelyTyped" && org === "DefinitelyTyped") {
        return false;
    }
    return true;
}
function maybePrintIssueCreationPrompt(vcs, packageDetails, packageManager) {
    if (vcs) {
        console.log(`💡 ${chalk_1.default.bold(packageDetails.name)} is on ${vcs.provider}! To draft an issue based on your patch run

    ${packageManager === "yarn" ? "yarn" : "npx"} patch-package ${packageDetails.pathSpecifier} --create-issue
`);
    }
}
function openIssueCreationLink({ packageDetails, patchFileContents, packageVersion, patchPath, }) {
    const vcs = getPackageVCSDetails(packageDetails);
    if (!vcs) {
        console.log(`Error: Couldn't find VCS details for ${packageDetails.pathSpecifier}`);
        process.exit(1);
    }
    // trim off trailing newline since we add an extra one in the markdown block
    if (patchFileContents.endsWith("\n")) {
        patchFileContents = patchFileContents.slice(0, -1);
    }
    let issueUrl = createIssueUrl({
        vcs,
        packageDetails,
        packageVersion,
        diff: patchFileContents,
    });
    const urlExceedsLimit = patchFileContents.length > 1950;
    if (urlExceedsLimit) {
        const diffMessage = `<!-- 🔺️🔺️🔺️ PLEASE REPLACE THIS BLOCK with the diff contents of ${patchPath
            .split("/")
            .pop()}. 🔺️🔺️🔺️ -->`;
        console.log(`📋 Copy the contents in [ ${patchPath} ] and paste it in the new issue's diff section.`);
        issueUrl = createIssueUrl({
            vcs,
            packageDetails,
            packageVersion,
            diff: diffMessage,
        });
    }
    (0, open_1.default)(issueUrl);
}
//# sourceMappingURL=data:application/json;base64,